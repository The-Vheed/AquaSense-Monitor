from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime, timezone


class SensorReading(BaseModel):
    """
    Represents a single sensor reading from the water treatment facility.
    """

    timestamp: datetime
    sensor_id: str
    temperature: float
    pressure: float
    flow: float


class Anomaly(BaseModel):
    """
    Represents a detected anomaly in sensor data.
    """

    type: str  # e.g., "spike", "drift", "dropout"
    timestamp: datetime
    sensor_id: str
    parameter: Optional[str] = None  # e.g., "temperature", "pressure", "flow"
    value: Optional[float] = None  # The anomalous value
    duration_seconds: Optional[int] = None  # For drift/dropout
    message: str


# class LLMSummary(BaseModel):
#     """
#     Represents a summary generated by the LLM.
#     """

#     timestamp: datetime
#     summary_text: str


class AnomalySummary(BaseModel):
    """
    Structured summary of detected anomalies.
    """

    overall_status: str = Field(
        ...,
        description="Overall operational status based on anomalies (e.g., 'Major', 'Minor', 'Critical').",
    )
    summary_message: str = Field(
        ...,
        description="A concise, human-readable summary message about the anomalies.",
    )
    anomalies_count: int = Field(
        ...,
        description="Total number of anomalies detected (e.g., spikes, drifts, dropouts).",
    )
    timestamp: datetime = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        description="Timestamp when the summary was generated.",
    )


class HealthStatus(BaseModel):
    """
    Represents the health status of the application components.
    """

    sensor_simulator_active: bool
    anomaly_detector_active: bool
    llm_summarizer_active: bool
    api_service_active: bool
    ollama_active: bool
    last_sensor_reading_received: Optional[datetime] = None
    last_anomaly_detected: Optional[datetime] = None
    last_summary_generated: Optional[datetime] = None
    current_anomalies_count: int
    ollama_model_loaded: bool = False
